// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // A register
        Not(in=instruction[15], out=is-a-inst1, out=is-a-instr2);
        Mux16(a=alu-out, b=instruction, sel=is-a-inst1, out=a-reg-in);
        // Load if A instruction or A destination
        Or(a=is-a-instr2, b=instruction[5], out=c-a); 
        ARegister(in=a-reg-in, load=c-a, out=a-reg-out, out[0..14]=addressM);

        // D Register
        // Load if C instruction and D destination
        And(a=instruction[15], b=instruction[4], out=c-d); 
        DRegister(in=alu-out, load=c-d, out=alu-x);

        // if C instruction and M operation, choose input from M
        And(a=instruction[15], b=instruction[12], out=c-a-or-m);
        Mux16(a=a-reg-out, b=inM, sel=c-a-or-m, out=alu-y);
        ALU(x=alu-x, y=alu-y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu-out, out=outM, zr=zr-out, ng=ng-out);
        
        // Calculate Load for PC

        // EQ, GT, LT, NEQ from ALU's zr, ng bits
        // if (zr == 1) then EQ=1
        // else if (ng == 0) then GT=1
        // else LT=1
        DMux4Way(in=true, sel[0]=ng-out, sel[1]=zr-out, a=GT, b=LT, c=EQ1, d=EQ2);
        Or(a=EQ1, b=EQ1, out=EQ);
        Or(a=GT, b=EQ, out=GEQ);
        Or(a=LT, b=EQ, out=LEQ);
        Not(in=EQ, out=NEQ);

        // Jump condition
        // if (j-condition && ALU out)
        DMux8Way(in=true, sel=instruction[0..2], a=none, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
        And(a=JGT, b=GT, out=jump-1);
        And(a=JEQ, b=EQ, out=jump-2);
        And(a=JGE, b=GEQ, out=jump-3);
        And(a=JLT, b=LT, out=jump-4);
        And(a=JNE, b=NEQ, out=jump-5);
        And(a=JLE, b=LEQ, out=jump-6);
        Or8Way(in[0]=jump-1, in[1]=jump-2, in[2]=jump-3, in[3]=jump-4, in[4]=jump-5, in[5]=jump-6, in[6]=JMP, in[7]=false, out=load-is-true);

        // Load if C instruction and load-is-true
        And(a=instruction[15], b=load-is-true, out=pc-load);
        Not(in=pc-load, out=no-load);
        PC(in=a-reg-out, load=pc-load, inc=no-load, reset=reset, out[0..14]=pc);

        // Write bit
        // if (C instruction && M destination)
        And(a=instruction[15], b=instruction[3], out=writeM);
}