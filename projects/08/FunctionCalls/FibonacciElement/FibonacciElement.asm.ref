@256  // bootstrap
D=A 
@SP 
M=D 
@Main$ret  // call Sys.init 0
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@5 
D=-A 
@0 
D=D-A 
@SP 
D=D+M 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Sys.init 
0;JMP 
@0  (Main$ret) // function Main.fibonacci 0 // label undefined (Main.fibonacci) // push argument 0
D=A 
@ARG 
A=D+M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@2  // push constant 2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@SP  // lt
AM=M-1 
D=M 
@SP 
AM=M-1 
D=M-D 
@IF_0 
D;JLT 
@SP 
A=M 
M=0 
@ENDIF_0 
0;JMP 
@SP  (IF_0)
A=M 
M=-1 
@SP  (ENDIF_0)
M=M+1 
@SP  // if-goto IF_TRUE
AM=M-1 
D=M 
@Main.fibonacci$IF_TRUE 
D;JNE 
@Main.fibonacci$IF_FALSE  // goto IF_FALSE
0;JMP 
@0  // label IF_TRUE (Main.fibonacci$IF_TRUE) // push argument 0
D=A 
@ARG 
A=D+M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL  // return from Main.fibonacci
D=M 
@FRAME 
M=D 
@5 
A=D-A 
D=M 
@RET 
M=D 
@SP 
AM=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@FRAME 
A=M-1 
D=M 
@THAT 
M=D 
@2 
D=A 
@FRAME 
A=M-D 
D=M 
@THIS 
M=D 
@3 
D=A 
@FRAME 
A=M-D 
D=M 
@ARG 
M=D 
@4 
D=A 
@FRAME 
A=M-D 
D=M 
@LCL 
M=D 
@RET 
A=M 
0;JMP 
@0  // label IF_FALSE (Main.fibonacci$IF_FALSE) // push argument 0
D=A 
@ARG 
A=D+M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@2  // push constant 2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@SP  // sub
AM=M-1 
D=M 
@SP 
AM=M-1 
M=M-D 
@SP 
M=M+1 
@Main.fibonacci$ret  // call Main.fibonacci 1
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@5 
D=-A 
@1 
D=D-A 
@SP 
D=D+M 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
@0  (Main.fibonacci$ret) // push argument 0
D=A 
@ARG 
A=D+M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@1  // push constant 1
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@SP  // sub
AM=M-1 
D=M 
@SP 
AM=M-1 
M=M-D 
@SP 
M=M+1 
@Main.fibonacci$ret1  // call Main.fibonacci 1
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@5 
D=-A 
@1 
D=D-A 
@SP 
D=D+M 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
@SP  (Main.fibonacci$ret1) // add
AM=M-1 
D=M 
@SP 
AM=M-1 
M=M+D 
@SP 
M=M+1 
@LCL  // return from Main.fibonacci
D=M 
@FRAME 
M=D 
@5 
A=D-A 
D=M 
@RET 
M=D 
@SP 
AM=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@FRAME 
A=M-1 
D=M 
@THAT 
M=D 
@2 
D=A 
@FRAME 
A=M-D 
D=M 
@THIS 
M=D 
@3 
D=A 
@FRAME 
A=M-D 
D=M 
@ARG 
M=D 
@4 
D=A 
@FRAME 
A=M-D 
D=M 
@LCL 
M=D 
@RET 
A=M 
0;JMP 
@4  // function Sys.init 0 // label undefined (Sys.init) // push constant 4
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@Sys.init$ret  // call Main.fibonacci 1
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@5 
D=-A 
@1 
D=D-A 
@SP 
D=D+M 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
@Sys.init$WHILE  (Sys.init$ret) // label WHILE (Sys.init$WHILE) // goto WHILE
0;JMP 