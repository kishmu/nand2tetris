// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }

        // initialize color to black
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        var int lastAddress;
        
        let i = 16384;
        let lastAddress = 16384 + (32 * 256);
        while (i < lastAddress) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int xDiv16;
        var int mask;

        let xDiv16 = x/16;
        let address = 16384 + (32 * y) + xDiv16;

        let value = Memory.peek(address);

        // set the x%16th bit of value to the current color
        let mask = twoToThe[x - (16 * xDiv16)];
        let value = ((value & ~mask) | ((0 | color) & mask)); // (0 | color) is to cast boolean to int

        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a, b;
        var int diff;
        var int dirX, dirY;
        var int mask;
        var int i;

        var int wordStart, wordEnd; 
        var int x1Div16, x2Div16;
        var int x1Mod16, x2Mod16;

        let dx = x2-x1; 
        let dy = y2-y1;
        
        let dirX = 1;
        if (dx < 0) {
            let dirX = -1;
            let dx = -dx;
        }

        let dirY = 1;
        if (dy < 0) {
            let dirY = -1;
            let dy = -dy;
        }

        // Horizontal and vertical lines are special cases
        // Write in word increments (faster), instead of pixel by pixel

        // vertical line
        if (dx = 0) {

            // sort y 
            let y1 = Math.min(y1, y2);
            let y2 = y1 + dy;

            let x1Div16 = x1/16;
            let wordStart = 16384 + (32 * y1) + x1Div16;
            let wordEnd = wordStart + (32 * dy);

            let x1Mod16 = x1 - (16 * x1Div16);
            let mask = twoToThe[x1Mod16];

            let b = wordStart;
            while (~(b > wordEnd)) {
                let a = ((Memory.peek(b) & ~mask) | ((0 | color) & mask)); 
                do Memory.poke(b, a);
                let b = b + 32;
            }
            return;
        }

        // horizontal line
        if (dy = 0) {

            // sort x
            let x1 = Math.min(x1, x2);
            let x2 = x1 + dx;

            let x1Div16 = x1/16;
            let wordStart = 16384 + (32 * y1) + x1Div16;

            let x2Div16 = x2/16;
            let wordEnd = 16384 + (32 * y2) + x2Div16;

            let x1Mod16 = x1 - (16 * x1Div16);
            let x2Mod16 = x2 - (16 * x2Div16);

            if (wordStart = wordEnd) {
                let b = x1Mod16;
                let mask = 0;
                while (~(b > x2Mod16)) {
                    let mask = mask | twoToThe[b];
                    let b = b + 1;
                }
                let a = ((Memory.peek(wordStart) & ~mask) | ((0 | color) & mask));
                do Memory.poke(wordStart, a);
                return;
            }

            let i = wordStart;
            while (~(i > wordEnd)) {
                if (i = wordStart) {
                    let b = x1Mod16;
                    let mask = 0;
                    while (b < 16) {
                        let mask = mask | twoToThe[b];
                        let b = b + 1;
                    }
                    let a = ((Memory.peek(wordStart) & ~mask) | ((0 | color) & mask));
                }

                if (~(i = wordStart) & ~(i = wordEnd)) {
                    let a = (0 | color);
                }

                if (i = wordEnd) {
                    let b = 0;
                    let mask = 0;
                    while (~(b > x2Mod16)) {
                        let mask = mask | twoToThe[b];
                        let b = b + 1;
                    }
                    let a = ((Memory.peek(wordEnd) & ~mask) | ((0 | color) & mask));
                }

                do Memory.poke(i, a);

                let i = i + 1;
            }
            
            return;
        }

        // lines at an angle
        /*
            function void drawLine(int x1, int y1, int x2, int y2)
                dx = x2 - x1; dy = y2 – y1;
                a = 0; b = 0; diff = 0;
                while ((a <= dx) and (b <= dy))
                    drawPixel(x + a, y + b);
                    // decide which way to go (up, or right)
                    if (diff < 0) { a++; diff += dy; }
                    else { b++; diff -= dx; }
        */
        let a = 0; 
        let b = 0;
        let diff = 0;
        while ((~(a > dx) & ~(b > dy))) {
            do Screen.drawPixel(x1 + (dirX * a), y1 + (dirY * b));
            let diff = (a * dy) - (b * dx);
            // decide which way to go (up, or right)
            if (diff < 0) { 
                let a = a + 1;
                let diff = diff + dy;
            }
            if (~(diff < 0)) {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        var int dir;
        var int a;
        var int y;

        let dy = y2-y1;
        let dir = 1;
        if (dy < 0) {
            let dy = -dy;
            let dir = -1;
        }

        let a = 0;
        // draw horizontal lines filling the rectangle
        while (~(a > dy)) {
            let y = y1 + (dir * a);
            do Screen.drawLine(x1, y, x2, y);
            let a = a + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        /*
        drawCircle (x, y, r)
            for each dy = –r to r do:
                drawLine (x - sqr(r^2 -dy^2), y + dy, x + sqr(r^2 - dy^2), y+dy)
        */
    
        var int dy;
        var int rSinTheta;
        var int rSqr;
        var int ypdy;

        // overflow check
        if (r > 181) {
            return;
        }

        let rSqr = r * r;
        let dy = -r;
        while (~(dy > r)) {
            let rSinTheta = Math.sqrt(rSqr - (dy * dy));
            let ypdy = y + dy;
            do Screen.drawLine(x - rSinTheta, ypdy, x + rSinTheta, ypdy);
            let dy = dy + 1;
        }

        return;
    }
}
