// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i; 
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    // returns true if ith bit x is 1, false otherwise
    function boolean bit(int x, int i) {
        if (x & twoToThe[i] = 0) {
            return false;
        }

        return true;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        /*
            multiply(x, y):
                sum = 0
                shiftedX = x
                for i = 0 ... w - 1 do
                    if ((i’th bit of y) == 1)
                        sum = sum + shiftedX
                    shiftedX = shiftedX * 2
            return sum
        */

        var int sum;
        var int i;
        var int shiftedX;

        let sum = 0;
        let i = 0;
        let shiftedX = x;

        while (i < 16) {
            if (Math.bit(y, i) = true) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        /*
        divide (x , y):
            if (y > x) return 0
            q = divide (x, 2 * y)
            if ((x – 2 * q * y) < y)
                return 2 * q
            else
                return 2 * q + 1
        */
        var int q;
        var int sign;
        var int result;

        // sign and abs values
        let sign = 1;
        if (x < 0) {
            let sign = -sign; 
            let x = -x;
        }
        if (y < 0) {
            let sign = -sign;
            let y = -y;
        }

        // y < 0 is an overflow check
        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (sign < 0) {
            return -result;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // Compute the integer part of y = sqrt(x)
        // Strategy: find an integer y such that y^2 <= x < (y+1)^2 ( for 0 < x < 2^n)
        // by performing a binary search in the range 0 .. 2^(n/2) - 1
        /*    
            sqrt (x):
                y = 0
                for j = n/2 - 1 ... 0 do
                    if (y + 2^j)^2 <= x then y = y + 2^j
                return y

            (y + 2^j)^2 can overflow, so change the check to 
            (y + 2^j)^2 <= x & (y + 2^j)^2 > 0
        */

        var int y;
        var int j;
        var int yPlus2ToTheJ;
        var int yPlus2ToTheJSqr;

        let y = 0;
        let j = 7; // 16/2 - 1

        while (j > -1) {
            let yPlus2ToTheJ = y + twoToThe[j];
            let yPlus2ToTheJSqr = yPlus2ToTheJ * yPlus2ToTheJ;
            if ((yPlus2ToTheJSqr > 0) & ((yPlus2ToTheJSqr < x) | (yPlus2ToTheJSqr = x))) {
                let y = yPlus2ToTheJ;
                do Output.printInt(y);
                do Output.println();
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
