// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334; // length = (16384-2048)-2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // Allocate a memory block of size words
        /*
        alloc(size):
            search freeList using best-fit or first-fit heuristics
                to obtain a segment with segment.size â‰¥ size + 2
            if no such segment is found, return failure
                (or attempt defragmentation)
            block = base address of the found space
            update the freeList and the fields of block
                to account for the allocation
            return block
        */
        var int curr;
        var int sizePlus2;

        let curr = freeList;
        let sizePlus2 = size + 2;

        // first-fit
        while (~(curr = 0)) {
            if ((curr[1] = sizePlus2) | (curr[1] > sizePlus2)) {
                // found

                // adjust freelist to new size
                let curr[1] = curr[1] - sizePlus2;

                // move curr to beginning of block to return
                let curr = curr + curr[1] + 2;
                
                // curr points to new block
                let curr[0] = 0;
                let curr[1] = size;
                return curr;
            }
            let curr = curr[0]; // curr = curr.next
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // append object to the end of the freeList
        var int curr;
        let curr = freeList;

        while (~(curr[0] = 0)) {
            let curr = curr[0]; // curr = curr.next
        }

        // curr is at the end of the list
        // append o to the end
        let curr[0] = o - 2;

        return;
    }    
}
